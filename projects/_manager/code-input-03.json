{
  "language": "Solidity",
  "sources": {
    "Contracts/DeploymentAccountDelegate.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract DeploymentAccountDelegateStorage {\r\n    // proxy storage\r\n    address public _owner;\r\n    address public _manager;\r\n    uint128 internal _nonce;\r\n\r\n    // delegate storage\r\n    uint128 internal _callNonce;\r\n}\r\n\r\ncontract DeploymentAccountDelegate is DeploymentAccountDelegateStorage {\r\n\r\n    function nonce() public view returns (uint128) {\r\n        return _nonce;\r\n    }\r\n\r\n    function callNonce() public view returns (uint128) {\r\n        return _callNonce;\r\n    }\r\n\r\n    function create(bytes memory bytecode) public payable returns (address) {\r\n        require(msg.sender == _owner || msg.sender == _manager, \"not owner or manager\");\r\n\r\n        _nonce++;\r\n        _callNonce++;\r\n\r\n        address addr;\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(addr != address(0), \"create failed\");\r\n        return addr;\r\n    }\r\n\r\n    function create2(uint salt, bytes memory bytecode) public payable returns (address) {\r\n        require(msg.sender == _owner || msg.sender == _manager, \"not owner or manager\");\r\n\r\n        _nonce++;\r\n        _callNonce++;\r\n\r\n        address addr;\r\n        assembly {\r\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(addr != address(0), \"create2 failed\");\r\n        return addr;\r\n    }\r\n\r\n    function call(address addr, uint256 amount, bytes calldata data) public payable {\r\n        require(msg.sender == _owner || msg.sender == _manager, \"not owner or manager\");\r\n\r\n        _callNonce++;\r\n\r\n        uint balance = address(this).balance;\r\n        require(balance >= amount, \"amount exceeds wallet balance\");\r\n\r\n        (bool sent, ) = payable(addr).call{value: amount}(data);\r\n        require(sent, \"call failed\");\r\n    }\r\n\r\n    function delegate(address addr, bytes calldata data) public payable {\r\n        require(msg.sender == _owner || msg.sender == _manager, \"not owner or manager\");\r\n\r\n        _callNonce++;\r\n\r\n        (bool sent, ) = payable(addr).delegatecall(data);\r\n        require(sent, \"call failed\");\r\n    }\r\n\r\n    function nop(uint16 count) public {\r\n        require(msg.sender == _owner || msg.sender == _manager, \"not owner or manager\");\r\n\r\n        _callNonce += count;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "Contracts/DeploymentManagerInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract DeploymentManagerInit {\r\n    address private _deploymentManager;\r\n    uint private _deploymentNonce;\r\n\r\n    constructor(address manager) {\r\n        _deploymentManager = manager;\r\n    }\r\n\r\n    function recoverSigner(\r\n        bytes32 _ethSignedMessageHash,\r\n        bytes memory _signature\r\n    ) internal pure returns (address) {\r\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n        return ecrecover(_ethSignedMessageHash, v, r, s);\r\n    }\r\n\r\n    function splitSignature(\r\n        bytes memory sig\r\n    ) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\r\n        require(sig.length == 65, \"invalid signature length\");\r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n    }\r\n\r\n    function getEthSignatureHash(bytes32 messageHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\r\n    }\r\n\r\n    function create(bytes memory bytecode, uint128 callNonce, bytes memory signature) public returns (address) {\r\n        require(_deploymentNonce == callNonce, \"nonce missmatch\");\r\n        bytes32 messageHash = keccak256(abi.encodePacked(address(this), \":dcreate:\", callNonce, bytecode));\r\n        require(recoverSigner(getEthSignatureHash(messageHash), signature) == _deploymentManager, \"invalid signature\");\r\n        \r\n        _deploymentNonce++;\r\n\r\n        address addr;\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        require(addr != address(0), \"create failed\");\r\n        return addr;\r\n    }\r\n\r\n    function call(address addr, uint256 amount, bytes memory data, uint128 callNonce, bytes memory signature) public {\r\n        require(_deploymentNonce == callNonce, \"nonce missmatch\");\r\n        bytes32 messageHash = keccak256(abi.encodePacked(address(this), \":dcall:\", callNonce, addr, amount, data));\r\n        require(recoverSigner(getEthSignatureHash(messageHash), signature) == _deploymentManager, \"invalid signature\");\r\n        \r\n        _deploymentNonce++;\r\n\r\n        uint balance = address(this).balance;\r\n        require(balance >= amount, \"amount exceeds wallet balance\");\r\n\r\n        (bool sent, ) = payable(addr).call{value: amount}(data);\r\n        require(sent, \"call failed\");\r\n    }\r\n\r\n    function nop(uint128 callNonce, bytes memory signature) public {\r\n        require(_deploymentNonce == callNonce, \"nonce missmatch\");\r\n        bytes32 messageHash = keccak256(abi.encodePacked(address(this), \":dnop:\", callNonce));\r\n        require(recoverSigner(getEthSignatureHash(messageHash), signature) == _deploymentManager, \"invalid signature\");\r\n        \r\n        _deploymentNonce++;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}
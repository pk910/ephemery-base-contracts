{
  "language": "Solidity",
  "sources": {
    "Contracts/DeploymentAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract DeploymentAccountStorage {\r\n    address public _owner;\r\n    address public _manager;\r\n    uint128 internal _nonce;\r\n    uint128 internal _callNonce;\r\n}\r\n\r\ninterface IDeploymentManager {\r\n    function getDeploymentAccountImplementation() external pure returns (address);\r\n}\r\n\r\ncontract DeploymentAccount is DeploymentAccountStorage {\r\n    constructor(address owner) {\r\n        _owner = owner;\r\n        _manager = msg.sender;\r\n        _nonce = 1;\r\n    }\r\n\r\n    function implementation() public view returns (address) {\r\n        return IDeploymentManager(_manager).getDeploymentAccountImplementation();\r\n    }\r\n\r\n    function _fallback() internal {\r\n        address _impl = implementation();\r\n        require(_impl != address(0), \"no implementation\");\r\n        _delegate(_impl);\r\n    }\r\n\r\n    function _delegate(address impl) internal virtual {\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    receive() external payable {\r\n        _fallback();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}
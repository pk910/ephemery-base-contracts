{
  "language": "Solidity",
  "sources": {
    "Contracts/TokenFaucet.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint value) external;\r\n}\r\n\r\ncontract TokenFaucet is Ownable {\r\n\r\n    function rescueCall(address addr, uint256 amount, bytes calldata data) public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        require(balance >= amount, \"amount exceeds wallet balance\");\r\n\r\n        (bool sent, ) = payable(addr).call{value: amount}(data);\r\n        require(sent, \"call failed\");\r\n    }\r\n\r\n    function getPrice(address token, uint256 amount) public view returns (uint256) {\r\n        // just give out tokens for 0.1 ETH / token\r\n        uint256 baseFee = 100000000000000000; // 0.1 ETH\r\n\r\n        uint8 decimals;\r\n        try IERC20(token).decimals() returns (uint8 dec) {\r\n            decimals = dec;\r\n        } catch {\r\n            decimals = 0;\r\n        }\r\n\r\n        uint256 totalFee;\r\n        if(decimals > 0) {\r\n            uint256 decimalFactor = 10**decimals;\r\n            if(baseFee < decimalFactor && decimalFactor / baseFee > 0) {\r\n                uint256 atomicBase = (decimalFactor / baseFee);\r\n                uint256 roundingGap = amount % atomicBase;\r\n                if(roundingGap > 0) {\r\n                    // round up to mitigate gap\r\n                    amount += (atomicBase - (roundingGap));\r\n                }\r\n            }\r\n            totalFee = amount * baseFee / decimalFactor;\r\n        }\r\n        else {\r\n            totalFee = amount * baseFee;\r\n        }\r\n\r\n        return totalFee;\r\n    }\r\n\r\n    function requestToken(address token, uint256 amount) public payable {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(amount <= balance, \"amount exceeds faucet balance\");\r\n\r\n        uint256 totalFee = getPrice(token, amount);\r\n        require(msg.value >= totalFee, \"payment amount too low\");\r\n\r\n        // send token\r\n        IERC20(token).transfer(msg.sender, amount);\r\n\r\n        uint256 refund = msg.value - totalFee;\r\n        if(refund > 0) {\r\n            (bool sent, ) = payable(msg.sender).call{value: refund}(\"\");\r\n            require(sent, \"failed to send refund\");\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}
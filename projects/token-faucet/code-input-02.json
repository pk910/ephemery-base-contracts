{
  "language": "Solidity",
  "sources": {
    "Contracts/TokenFaucet.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint value) external;\r\n}\r\n\r\ncontract TokenFaucetStorage {\r\n    // proxy storage\r\n    address internal _manager;\r\n    address internal _implementation;\r\n\r\n    // faucet storage\r\n    uint256 internal _baseFee;\r\n}\r\n\r\ncontract TokenFaucet is TokenFaucetStorage {\r\n\r\n    function configure(uint256 baseFee) public {\r\n        require(msg.sender == _manager, \"not manager\");\r\n        _baseFee = baseFee;\r\n    }\r\n\r\n    function rescueCall(address addr, uint256 amount, bytes calldata data) public {\r\n        require(msg.sender == _manager, \"not manager\");\r\n\r\n        uint balance = address(this).balance;\r\n        require(balance >= amount, \"amount exceeds wallet balance\");\r\n\r\n        (bool sent, ) = payable(addr).call{value: amount}(data);\r\n        require(sent, \"call failed\");\r\n    }\r\n\r\n    function getPrice(address token, uint256 amount) public view returns (uint256) {\r\n        uint256 baseFee = _baseFee;\r\n        require(baseFee > 0, \"basefee not set\");\r\n\r\n        uint8 decimals;\r\n        try IERC20(token).decimals() returns (uint8 dec) {\r\n            decimals = dec;\r\n        } catch {\r\n            decimals = 0;\r\n        }\r\n\r\n        uint256 totalFee;\r\n        if(decimals > 0) {\r\n            uint256 decimalFactor = 10**decimals;\r\n            if(baseFee < decimalFactor && decimalFactor / baseFee > 0) {\r\n                uint256 atomicBase = (decimalFactor / baseFee);\r\n                uint256 roundingGap = amount % atomicBase;\r\n                if(roundingGap > 0) {\r\n                    // round up to mitigate gap\r\n                    amount += (atomicBase - (roundingGap));\r\n                }\r\n            }\r\n            totalFee = amount * baseFee / decimalFactor;\r\n        }\r\n        else {\r\n            totalFee = amount * baseFee;\r\n        }\r\n\r\n        return totalFee;\r\n    }\r\n\r\n    function requestToken(address token, uint256 amount) public payable {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(amount <= balance, \"amount exceeds faucet balance\");\r\n\r\n        uint256 totalFee = getPrice(token, amount);\r\n        require(msg.value >= totalFee, \"payment amount too low\");\r\n\r\n        // send token\r\n        IERC20(token).transfer(msg.sender, amount);\r\n\r\n        uint256 refund = msg.value - totalFee;\r\n        if(refund > 0) {\r\n            (bool sent, ) = payable(msg.sender).call{value: refund}(\"\");\r\n            require(sent, \"failed to send refund\");\r\n        }\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}